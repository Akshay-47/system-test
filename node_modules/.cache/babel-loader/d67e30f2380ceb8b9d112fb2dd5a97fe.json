{"ast":null,"code":"import _slicedToArray from \"/Users/akshay_lr/React-Projects/todo-application/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/akshay_lr/React-Projects/todo-application/src/components/Form.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Button from \"./Button\";\nimport { connect } from \"react-redux\";\n\nconst Form = ({\n  type,\n  formId,\n  handleFormSubmit,\n  handleCancel,\n  postIdToEdit,\n  posts\n}) => {\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        title = _useState2[0],\n        setTitle = _useState2[1];\n\n  const _useState3 = useState(\"\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        titleError = _useState4[0],\n        setTitleError = _useState4[1];\n\n  const _useState5 = useState(\"\"),\n        _useState6 = _slicedToArray(_useState5, 2),\n        description = _useState6[0],\n        setDescription = _useState6[1];\n\n  const _useState7 = useState(\"\"),\n        _useState8 = _slicedToArray(_useState7, 2),\n        descriptionError = _useState8[0],\n        setDescriptionError = _useState8[1];\n\n  const _useState9 = useState(false),\n        _useState10 = _slicedToArray(_useState9, 2),\n        selectedOption = _useState10[0],\n        setSelectedOption = _useState10[1];\n\n  const _useState11 = useState(\"none\"),\n        _useState12 = _slicedToArray(_useState11, 2),\n        priority = _useState12[0],\n        setPriority = _useState12[1];\n\n  const _useState13 = useState(\"\"),\n        _useState14 = _slicedToArray(_useState13, 2),\n        dueDate = _useState14[0],\n        setDueDate = _useState14[1];\n\n  const handleOptionChange = ev => {\n    console.log(ev.target.value);\n    setSelectedOption(ev.target.value);\n  };\n\n  useEffect(() => {\n    populateFields();\n  });\n\n  const populateFields = () => {\n    if (postIdToEdit !== null) {\n      const post = getPostById(postIdToEdit);\n      setTitle(post.title);\n      setDescription(post.description);\n      setPriority(post.priority);\n      setDueDate(post.dueDate);\n      setSelectedOption(post.currentState);\n    }\n  };\n\n  const getPostById = id => {\n    return posts.find(post => post.id === id);\n  };\n\n  const getDate = () => {\n    const today = new Date();\n    return today.toISOString().substring(0, 10);\n  };\n\n  const handleSubmit = () => {\n    if (titleError === \"\" && descriptionError === \"\") {\n      const newTodo = {\n        id: Number(Date.now()),\n        currentState: selectedOption,\n        title,\n        description,\n        createdAt: getDate(),\n        dueDate,\n        priority\n      };\n      handleFormSubmit(newTodo);\n    }\n  };\n\n  let defaultFormType = 0; // ADD Form\n\n  if (type === \"edit\") {\n    defaultFormType = 1;\n  }\n\n  const actions = function () {\n    return React.createElement(React.Fragment, null, React.createElement(Button, {\n      name: \"Save\",\n      class: \"submit\",\n      type: \"submit\",\n      onClick: e => handleSubmit(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(Button, {\n      name: \"Cancel\",\n      class: \"cancel\",\n      onClick: () => handleCancel(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }));\n  };\n\n  const validateTitle = () => {\n    if (title.length < 10) setTitleError(\"Enter at least 10 characters\");else if (title.length > 500) setTitleError(\"Max Length Exceeded\");else setTitleError(\"\");\n  };\n\n  const validateDescription = () => {\n    if (description.length < 10) setDescriptionError(\"Enter at least 10 characters\");else if (description.length > 500) setDescriptionError(\"Max Length Exceeded\");else setDescriptionError(\"\");\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    id: formId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, \" Title:\")), React.createElement(\"input\", {\n    type: \"text\",\n    value: title,\n    onChange: e => setTitle(e.target.value),\n    id: \"title\",\n    onBlur: validateTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, titleError)), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"description\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, \" Description:\")), React.createElement(\"textarea\", {\n    value: description,\n    onChange: e => setDescription(e.target.value),\n    rows: \"10\",\n    cols: \"30\",\n    id: \"description\",\n    onBlur: validateDescription,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, descriptionError)), defaultFormType === 1 && React.createElement(\"div\", {\n    className: \"current-state\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, \"Current State:\")), React.createElement(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"radio\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"radio\",\n    value: \"true\",\n    checked: selectedOption === true,\n    onChange: e => handleOptionChange(e),\n    id: \"closed_task\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    htmlFor: \"closed_task\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, \"Closed\"))), React.createElement(\"p\", {\n    className: \"radio\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"radio\",\n    value: \"false\",\n    checked: selectedOption === false,\n    onChange: e => handleOptionChange(e),\n    id: \"open_task\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    htmlFor: \"open_task\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, \"Open\"))))), defaultFormType === 1 && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, \"Created At:\")), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, \"Some Date\")), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"due_date\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, \"Due Date:\")), React.createElement(\"input\", {\n    type: \"date\",\n    name: \"due date\",\n    id: \"due_date\",\n    value: dueDate,\n    onChange: event => setDueDate(event.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  })), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"priority\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, \"Priority\")), React.createElement(\"select\", {\n    id: \"priority\",\n    value: priority,\n    name: \"priority\",\n    onChange: e => setPriority(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"low\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, \"Low\"), React.createElement(\"option\", {\n    value: \"medium\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }, \"Medium\"), React.createElement(\"option\", {\n    value: \"high\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }, \"High\"), React.createElement(\"option\", {\n    value: \"none\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }, \"None\"))), actions()));\n};\n\nconst mapStateToProps = state => {\n  return {\n    posts: state.todos,\n    postIdToEdit: state.formEdit\n  };\n};\n\nexport default connect(mapStateToProps)(Form);","map":{"version":3,"sources":["/Users/akshay_lr/React-Projects/todo-application/src/components/Form.js"],"names":["React","useState","useEffect","Button","connect","Form","type","formId","handleFormSubmit","handleCancel","postIdToEdit","posts","title","setTitle","titleError","setTitleError","description","setDescription","descriptionError","setDescriptionError","selectedOption","setSelectedOption","priority","setPriority","dueDate","setDueDate","handleOptionChange","ev","console","log","target","value","populateFields","post","getPostById","currentState","id","find","getDate","today","Date","toISOString","substring","handleSubmit","newTodo","Number","now","createdAt","defaultFormType","actions","e","validateTitle","length","validateDescription","event","mapStateToProps","state","todos","formEdit"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport Button from \"./Button\";\nimport { connect } from \"react-redux\";\n\nconst Form = ({\n  type,\n  formId,\n  handleFormSubmit,\n  handleCancel,\n  postIdToEdit,\n  posts\n}) => {\n  const [title, setTitle] = useState(\"\");\n  const [titleError, setTitleError] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [descriptionError, setDescriptionError] = useState(\"\");\n  const [selectedOption, setSelectedOption] = useState(false);\n  const [priority, setPriority] = useState(\"none\");\n  const [dueDate, setDueDate] = useState(\"\");\n  const handleOptionChange = ev => {\n    console.log(ev.target.value);\n    setSelectedOption(ev.target.value);\n  };\n\n  useEffect(() => {\n    populateFields();\n  });\n\n  const populateFields = () => {\n    if (postIdToEdit !== null) {\n      const post = getPostById(postIdToEdit);\n      setTitle(post.title);\n      setDescription(post.description);\n      setPriority(post.priority);\n      setDueDate(post.dueDate);\n      setSelectedOption(post.currentState);\n    }\n  };\n\n  const getPostById = id => {\n    return posts.find(post => post.id === id);\n  };\n\n  const getDate = () => {\n    const today = new Date();\n    return today.toISOString().substring(0, 10);\n  };\n\n  const handleSubmit = () => {\n    if (titleError === \"\" && descriptionError === \"\") {\n      const newTodo = {\n        id: Number(Date.now()),\n        currentState: selectedOption,\n        title,\n        description,\n        createdAt: getDate(),\n        dueDate,\n        priority\n      };\n      handleFormSubmit(newTodo);\n    }\n  };\n\n  let defaultFormType = 0; // ADD Form\n  if (type === \"edit\") {\n    defaultFormType = 1;\n  }\n\n  const actions = function() {\n    return (\n      <>\n        <Button\n          name=\"Save\"\n          class=\"submit\"\n          type=\"submit\"\n          onClick={e => handleSubmit()}\n        />\n        <Button name=\"Cancel\" class=\"cancel\" onClick={() => handleCancel()} />\n      </>\n    );\n  };\n\n  const validateTitle = () => {\n    if (title.length < 10) setTitleError(\"Enter at least 10 characters\");\n    else if (title.length > 500) setTitleError(\"Max Length Exceeded\");\n    else setTitleError(\"\");\n  };\n\n  const validateDescription = () => {\n    if (description.length < 10)\n      setDescriptionError(\"Enter at least 10 characters\");\n    else if (description.length > 500)\n      setDescriptionError(\"Max Length Exceeded\");\n    else setDescriptionError(\"\");\n  };\n\n  return (\n    <div>\n      <form id={formId}>\n        <p>\n          <label htmlFor=\"title\">\n            <span> Title:</span>\n          </label>\n          <input\n            type=\"text\"\n            value={title}\n            onChange={e => setTitle(e.target.value)}\n            id=\"title\"\n            onBlur={validateTitle}\n          />\n          <span className=\"error\">{titleError}</span>\n        </p>\n        <p>\n          <label htmlFor=\"description\">\n            <span> Description:</span>\n          </label>\n          <textarea\n            value={description}\n            onChange={e => setDescription(e.target.value)}\n            rows=\"10\"\n            cols=\"30\"\n            id=\"description\"\n            onBlur={validateDescription}\n          ></textarea>\n          <span className=\"error\">{descriptionError}</span>\n        </p>\n        {defaultFormType === 1 && (\n          <div className=\"current-state\">\n            <label>\n              <span>Current State:</span>\n            </label>\n            <fieldset>\n              <p className=\"radio\">\n                <input\n                  type=\"radio\"\n                  value=\"true\"\n                  checked={selectedOption === true}\n                  onChange={e => handleOptionChange(e)}\n                  id=\"closed_task\"\n                />\n                <label htmlFor=\"closed_task\">\n                  <span>Closed</span>\n                </label>\n              </p>\n              <p className=\"radio\">\n                <input\n                  type=\"radio\"\n                  value=\"false\"\n                  checked={selectedOption === false}\n                  onChange={e => handleOptionChange(e)}\n                  id=\"open_task\"\n                />\n                <label htmlFor=\"open_task\">\n                  <span>Open</span>\n                </label>\n              </p>\n            </fieldset>\n          </div>\n        )}\n        {defaultFormType === 1 && (\n          <p>\n            <label>\n              <span>Created At:</span>\n            </label>\n            <span>Some Date</span>\n          </p>\n        )}\n        <p>\n          <label htmlFor=\"due_date\">\n            <span>Due Date:</span>\n          </label>\n          <input\n            type=\"date\"\n            name=\"due date\"\n            id=\"due_date\"\n            value={dueDate}\n            onChange={event => setDueDate(event.target.value)}\n          />\n        </p>\n\n        <p>\n          <label htmlFor=\"priority\">\n            <span>Priority</span>\n          </label>\n          <select\n            id=\"priority\"\n            value={priority}\n            name=\"priority\"\n            onChange={e => setPriority(e.target.value)}\n          >\n            <option value=\"low\">Low</option>\n            <option value=\"medium\">Medium</option>\n            <option value=\"high\">High</option>\n            <option value=\"none\">None</option>\n          </select>\n        </p>\n        {actions()}\n      </form>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    posts: state.todos,\n    postIdToEdit: state.formEdit\n  };\n};\n\nexport default connect(mapStateToProps)(Form);\n"]},"metadata":{},"sourceType":"module"}