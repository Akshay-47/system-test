{"ast":null,"code":"import _slicedToArray from \"/Users/akshay_lr/React-Projects/todo-application/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/akshay_lr/React-Projects/todo-application/src/components/TableList.js\";\nimport React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Button from \"./Button\";\nimport EditForm from \"./Form\";\nimport Modal from \"./Modal\";\nimport { deleteTodo, reOpenTodo } from \"../store/todo\";\n\nconst handleOnReOpen = postId => {\n  console.log(\"handleOnReOpen\", postId);\n  reOpenTodo(postId);\n};\n\nconst handleDone = () => {\n  console.log(\"handleDone\");\n};\n\nconst TableList = ({\n  todos,\n  deleteTodo\n}) => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        editModalIsOpen = _useState2[0],\n        setEditModalIsOpen = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        deleteModalIsOpen = _useState4[0],\n        setDeleteModalIsOpen = _useState4[1];\n\n  const _useState5 = useState(null),\n        _useState6 = _slicedToArray(_useState5, 2),\n        deleteItem = _useState6[0],\n        setDeleteItem = _useState6[1];\n\n  const handleDelete = postId => {\n    setDeleteModalIsOpen(true);\n    setDeleteItem(postId);\n  };\n\n  const onDeleteConfirmation = () => {\n    deleteTodo(deleteItem);\n    setDeleteItem(null);\n    setDeleteModalIsOpen(false);\n  };\n\n  const handleEdit = postId => {// setEditModalIsOpen(true);\n  };\n\n  const onEditDismiss = () => {\n    setEditModalIsOpen(false);\n  };\n\n  const handleTableRowClick = (e, postId) => {\n    e.persist();\n    e.stopPropagation();\n\n    if (e.target.matches(\".delete\")) {\n      handleDelete(postId);\n    } else if (e.target.matches(\".done\")) {\n      handleDone(postId);\n    } else if (e.target.matches(\".edit\")) {\n      handleEdit(postId);\n    } else if (e.target.matches(\".re-open\")) {\n      handleOnReOpen(postId);\n    } else {\n      console.log(\"Modal desc to be opened\"); // openDescriptionModal()\n    }\n  };\n\n  const renderTableRow = todos => {\n    return todos.map((todo, index) => React.createElement(\"tr\", {\n      key: index,\n      onClick: e => handleTableRowClick(e, todo.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      className: \"table-data \" + (todo.currentState ? \"complete\" : \"in-complete\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, todo.title), React.createElement(\"td\", {\n      className: \"table-data \" + (todo.currentState ? \"complete\" : \"in-complete\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, todo.priority), React.createElement(\"td\", {\n      className: \"table-data \" + (todo.currentState ? \"complete\" : \"in-complete\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, todo.createdAt), React.createElement(\"td\", {\n      className: \"table-data \" + (todo.currentState ? \"complete\" : \"in-complete\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, todo.dueDate), React.createElement(\"td\", {\n      className: \"table-data \" + (todo.currentState ? \"complete\" : \"in-complete\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, actions(todo.currentState))));\n  };\n\n  const actions = currentState => {\n    if (currentState) return React.createElement(\"div\", {\n      className: \"todo-item action\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(Button, {\n      name: \"Re-Open\",\n      class_: \"re-open\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }));\n    return React.createElement(\"div\", {\n      className: \"todo-item action\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(Button, {\n      name: \"Edit\",\n      class_: \"edit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }), React.createElement(Button, {\n      name: \"Delete\",\n      class_: \"delete\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }), React.createElement(Button, {\n      name: \"Done\",\n      class_: \"done\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }));\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, renderTableRow(todos)), React.createElement(Modal, {\n    show: editModalIsOpen,\n    onDismiss: onEditDismiss,\n    title: \"Edit\",\n    content: React.createElement(EditForm, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }),\n    actions: React.createElement(Button, {\n      name: \"Save\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }), React.createElement(Modal, {\n    show: deleteModalIsOpen,\n    onDismiss: () => setDeleteModalIsOpen(false),\n    title: \"Delete\",\n    content: React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"Are you sure you want to Delete\"),\n    actions: React.createElement(React.Fragment, null, React.createElement(Button, {\n      name: \"Yes! I'm sure\",\n      onClick: onDeleteConfirmation,\n      class_: \"delete\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), React.createElement(Button, {\n      name: \"No! Keep it\",\n      onClick: () => setDeleteModalIsOpen(false),\n      class_: \"warning\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }));\n};\n\nconst mapStateToProps = state => {\n  return {\n    todos: state.todos\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    deleteTodo: postId => dispatch(deleteTodo(postId)),\n    reOpenTodo: postId => dispatch(reOpenTodo(postId))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TableList);","map":{"version":3,"sources":["/Users/akshay_lr/React-Projects/todo-application/src/components/TableList.js"],"names":["React","useState","connect","Button","EditForm","Modal","deleteTodo","reOpenTodo","handleOnReOpen","postId","console","log","handleDone","TableList","todos","editModalIsOpen","setEditModalIsOpen","deleteModalIsOpen","setDeleteModalIsOpen","deleteItem","setDeleteItem","handleDelete","onDeleteConfirmation","handleEdit","onEditDismiss","handleTableRowClick","e","persist","stopPropagation","target","matches","renderTableRow","map","todo","index","id","currentState","title","priority","createdAt","dueDate","actions","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Button from \"./Button\";\nimport EditForm from \"./Form\";\nimport Modal from \"./Modal\";\n\nimport { deleteTodo, reOpenTodo } from \"../store/todo\";\n\nconst handleOnReOpen = postId => {\n  console.log(\"handleOnReOpen\", postId);\n  reOpenTodo(postId);\n};\n\nconst handleDone = () => {\n  console.log(\"handleDone\");\n};\n\nconst TableList = ({ todos, deleteTodo }) => {\n  const [editModalIsOpen, setEditModalIsOpen] = useState(false);\n  const [deleteModalIsOpen, setDeleteModalIsOpen] = useState(false);\n  const [deleteItem, setDeleteItem] = useState(null);\n\n  const handleDelete = postId => {\n    setDeleteModalIsOpen(true);\n    setDeleteItem(postId);\n  };\n\n  const onDeleteConfirmation = () => {\n    deleteTodo(deleteItem);\n    setDeleteItem(null);\n    setDeleteModalIsOpen(false);\n  };\n\n  const handleEdit = postId => {\n    // setEditModalIsOpen(true);\n  };\n\n  const onEditDismiss = () => {\n    setEditModalIsOpen(false);\n  };\n\n  const handleTableRowClick = (e, postId) => {\n    e.persist();\n    e.stopPropagation();\n    if (e.target.matches(\".delete\")) {\n      handleDelete(postId);\n    } else if (e.target.matches(\".done\")) {\n      handleDone(postId);\n    } else if (e.target.matches(\".edit\")) {\n      handleEdit(postId);\n    } else if (e.target.matches(\".re-open\")) {\n      handleOnReOpen(postId);\n    } else {\n      console.log(\"Modal desc to be opened\");\n      // openDescriptionModal()\n    }\n  };\n\n  const renderTableRow = todos => {\n    return todos.map((todo, index) => (\n      <tr key={index} onClick={e => handleTableRowClick(e, todo.id)}>\n        <td\n          className={\n            \"table-data \" + (todo.currentState ? \"complete\" : \"in-complete\")\n          }\n        >\n          {todo.title}\n        </td>\n        <td\n          className={\n            \"table-data \" + (todo.currentState ? \"complete\" : \"in-complete\")\n          }\n        >\n          {todo.priority}\n        </td>\n        <td\n          className={\n            \"table-data \" + (todo.currentState ? \"complete\" : \"in-complete\")\n          }\n        >\n          {todo.createdAt}\n        </td>\n        <td\n          className={\n            \"table-data \" + (todo.currentState ? \"complete\" : \"in-complete\")\n          }\n        >\n          {todo.dueDate}\n        </td>\n        <td\n          className={\n            \"table-data \" + (todo.currentState ? \"complete\" : \"in-complete\")\n          }\n        >\n          {actions(todo.currentState)}\n        </td>\n      </tr>\n    ));\n  };\n\n  const actions = currentState => {\n    if (currentState)\n      return (\n        <div className=\"todo-item action\">\n          <Button name={\"Re-Open\"} class_=\"re-open\" />\n        </div>\n      );\n    return (\n      <div className=\"todo-item action\">\n        <Button name=\"Edit\" class_=\"edit\" />\n        <Button name=\"Delete\" class_=\"delete\" />\n        <Button name=\"Done\" class_=\"done\" />\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <tbody>{renderTableRow(todos)}</tbody>\n      <Modal\n        show={editModalIsOpen}\n        onDismiss={onEditDismiss}\n        title=\"Edit\"\n        content={<EditForm />}\n        actions={<Button name=\"Save\" />}\n      />\n      <Modal\n        show={deleteModalIsOpen}\n        onDismiss={() => setDeleteModalIsOpen(false)}\n        title=\"Delete\"\n        content={<p>Are you sure you want to Delete</p>}\n        actions={\n          <>\n            <Button\n              name=\"Yes! I'm sure\"\n              onClick={onDeleteConfirmation}\n              class_=\"delete\"\n            />\n            <Button\n              name=\"No! Keep it\"\n              onClick={() => setDeleteModalIsOpen(false)}\n              class_=\"warning\"\n            />\n          </>\n        }\n      />\n    </>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    todos: state.todos\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    deleteTodo: postId => dispatch(deleteTodo(postId)),\n    reOpenTodo: postId => dispatch(reOpenTodo(postId))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TableList);\n"]},"metadata":{},"sourceType":"module"}