{"ast":null,"code":"import _slicedToArray from \"/Users/akshay_lr/React-Projects/todo-application/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/akshay_lr/React-Projects/todo-application/src/components/TableList.js\";\nimport React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Button from \"./Button\";\nimport EditForm from \"./Form\";\nimport Modal from \"./Modal\";\nimport { deleteTodo, reOpenTodo, markDone } from \"../store/todo\";\n\nconst TableList = ({\n  todos,\n  deleteTodo,\n  reOpenTodo,\n  markDone\n}) => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        editModalIsOpen = _useState2[0],\n        setEditModalIsOpen = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        deleteModalIsOpen = _useState4[0],\n        setDeleteModalIsOpen = _useState4[1];\n\n  const _useState5 = useState(null),\n        _useState6 = _slicedToArray(_useState5, 2),\n        deleteItem = _useState6[0],\n        setDeleteItem = _useState6[1];\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        isOpenDescriptionModal = _useState8[0],\n        setIsOpenDescriptionModal = _useState8[1];\n\n  const _useState9 = useState(\"\"),\n        _useState10 = _slicedToArray(_useState9, 2),\n        modalContent = _useState10[0],\n        setModalContent = _useState10[1];\n\n  const handleDelete = postId => {\n    setDeleteModalIsOpen(true);\n    setDeleteItem(postId);\n  };\n\n  const handleDone = postId => {\n    markDone(postId);\n  };\n\n  const onDeleteConfirmation = () => {\n    deleteTodo(deleteItem);\n    setDeleteItem(null);\n    setDeleteModalIsOpen(false);\n  };\n\n  const handleOnReOpen = postId => {\n    reOpenTodo(postId);\n  };\n\n  const handleEdit = postId => {// setEditModalIsOpen(true);\n  };\n\n  const onEditDismiss = () => {\n    setEditModalIsOpen(false);\n  };\n\n  const openDescriptionModal = postId => {\n    const item = todos.find(todo => todo.id === postId);\n    setIsOpenDescriptionModal(true);\n    const renderDescription = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, \"Title: \", item.title), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"Description: \", item.description), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, \"Created At: \", item.createdAt), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"Due Date: \", item.dueDate), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"Priority: \", item.priority), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"Current State: \", item.currentState === true ? \"Done\" : \"Open\"));\n  };\n\n  const handleTableRowClick = (e, postId) => {\n    e.persist();\n    e.stopPropagation();\n\n    if (e.target.matches(\".delete\")) {\n      handleDelete(postId);\n    } else if (e.target.matches(\".done\")) {\n      handleDone(postId);\n    } else if (e.target.matches(\".edit\")) {\n      handleEdit(postId);\n    } else if (e.target.matches(\".re-open\")) {\n      handleOnReOpen(postId);\n    } else {\n      openDescriptionModal(postId);\n    }\n  };\n\n  const renderTableRow = todos => {\n    return todos.map((todo, index) => React.createElement(\"tr\", {\n      key: index,\n      onClick: e => handleTableRowClick(e, todo.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      className: \"table-data \" + (todo.currentState ? \"complete\" : \"in-complete\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, todo.title), React.createElement(\"td\", {\n      className: \"table-data \" + (todo.currentState ? \"complete\" : \"in-complete\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, todo.priority), React.createElement(\"td\", {\n      className: \"table-data \" + (todo.currentState ? \"complete\" : \"in-complete\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, todo.createdAt), React.createElement(\"td\", {\n      className: \"table-data \" + (todo.currentState ? \"complete\" : \"in-complete\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, todo.dueDate), React.createElement(\"td\", {\n      className: \"table-data \" + (todo.currentState ? \"complete\" : \"in-complete\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, actions(todo.currentState))));\n  };\n\n  const actions = currentState => {\n    if (currentState) return React.createElement(\"div\", {\n      className: \"todo-item action\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(Button, {\n      name: \"Re-Open\",\n      class_: \"re-open\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }));\n    return React.createElement(\"div\", {\n      className: \"todo-item action\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(Button, {\n      name: \"Edit\",\n      class_: \"edit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }), React.createElement(Button, {\n      name: \"Delete\",\n      class_: \"delete\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }), React.createElement(Button, {\n      name: \"Done\",\n      class_: \"done\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }));\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, renderTableRow(todos)), React.createElement(Modal, {\n    show: editModalIsOpen,\n    onDismiss: onEditDismiss,\n    title: \"Edit\",\n    content: React.createElement(EditForm, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }),\n    actions: React.createElement(Button, {\n      name: \"Save\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }), React.createElement(Modal, {\n    show: deleteModalIsOpen,\n    onDismiss: () => setDeleteModalIsOpen(false),\n    title: \"Delete\",\n    content: React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \"Are you sure you want to Delete\"),\n    actions: React.createElement(React.Fragment, null, React.createElement(Button, {\n      name: \"Yes! I'm sure\",\n      onClick: onDeleteConfirmation,\n      class_: \"delete\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }), React.createElement(Button, {\n      name: \"No! Keep it\",\n      onClick: () => setDeleteModalIsOpen(false),\n      class_: \"warning\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }), React.createElement(Modal, {\n    show: isOpenDescriptionModal,\n    onDismiss: () => setIsOpenDescriptionModal(false),\n    title: \"View Item\",\n    content: modalContent,\n    actions: React.createElement(Button, {\n      name: \"Okay!\",\n      onClick: () => setIsOpenDescriptionModal(false),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }));\n};\n\nconst mapStateToProps = state => {\n  return {\n    todos: state.todos\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    deleteTodo: postId => dispatch(deleteTodo(postId)),\n    reOpenTodo: postId => dispatch(reOpenTodo(postId)),\n    markDone: postId => dispatch(markDone(postId))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TableList);","map":{"version":3,"sources":["/Users/akshay_lr/React-Projects/todo-application/src/components/TableList.js"],"names":["React","useState","connect","Button","EditForm","Modal","deleteTodo","reOpenTodo","markDone","TableList","todos","editModalIsOpen","setEditModalIsOpen","deleteModalIsOpen","setDeleteModalIsOpen","deleteItem","setDeleteItem","isOpenDescriptionModal","setIsOpenDescriptionModal","modalContent","setModalContent","handleDelete","postId","handleDone","onDeleteConfirmation","handleOnReOpen","handleEdit","onEditDismiss","openDescriptionModal","item","find","todo","id","renderDescription","title","description","createdAt","dueDate","priority","currentState","handleTableRowClick","e","persist","stopPropagation","target","matches","renderTableRow","map","index","actions","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Button from \"./Button\";\nimport EditForm from \"./Form\";\nimport Modal from \"./Modal\";\n\nimport { deleteTodo, reOpenTodo, markDone } from \"../store/todo\";\n\nconst TableList = ({ todos, deleteTodo, reOpenTodo, markDone }) => {\n  const [editModalIsOpen, setEditModalIsOpen] = useState(false);\n  const [deleteModalIsOpen, setDeleteModalIsOpen] = useState(false);\n  const [deleteItem, setDeleteItem] = useState(null);\n  const [isOpenDescriptionModal, setIsOpenDescriptionModal] = useState(false);\n  const [modalContent, setModalContent] = useState(\"\");\n\n  const handleDelete = postId => {\n    setDeleteModalIsOpen(true);\n    setDeleteItem(postId);\n  };\n\n  const handleDone = postId => {\n    markDone(postId);\n  };\n\n  const onDeleteConfirmation = () => {\n    deleteTodo(deleteItem);\n    setDeleteItem(null);\n    setDeleteModalIsOpen(false);\n  };\n\n  const handleOnReOpen = postId => {\n    reOpenTodo(postId);\n  };\n\n  const handleEdit = postId => {\n    // setEditModalIsOpen(true);\n  };\n\n  const onEditDismiss = () => {\n    setEditModalIsOpen(false);\n  };\n\n  const openDescriptionModal = postId => {\n    const item = todos.find(todo => todo.id === postId);\n    setIsOpenDescriptionModal(true);\n    const renderDescription = (\n      <div>\n        <p>Title: {item.title}</p>\n        <p>Description: {item.description}</p>\n        <p>Created At: {item.createdAt}</p>\n        <p>Due Date: {item.dueDate}</p>\n        <p>Priority: {item.priority}</p>\n        <p>Current State: {item.currentState === true ? \"Done\" : \"Open\"}</p>\n      </div>\n    );\n  };\n\n  const handleTableRowClick = (e, postId) => {\n    e.persist();\n    e.stopPropagation();\n    if (e.target.matches(\".delete\")) {\n      handleDelete(postId);\n    } else if (e.target.matches(\".done\")) {\n      handleDone(postId);\n    } else if (e.target.matches(\".edit\")) {\n      handleEdit(postId);\n    } else if (e.target.matches(\".re-open\")) {\n      handleOnReOpen(postId);\n    } else {\n      openDescriptionModal(postId);\n    }\n  };\n\n  const renderTableRow = todos => {\n    return todos.map((todo, index) => (\n      <tr key={index} onClick={e => handleTableRowClick(e, todo.id)}>\n        <td\n          className={\n            \"table-data \" + (todo.currentState ? \"complete\" : \"in-complete\")\n          }\n        >\n          {todo.title}\n        </td>\n        <td\n          className={\n            \"table-data \" + (todo.currentState ? \"complete\" : \"in-complete\")\n          }\n        >\n          {todo.priority}\n        </td>\n        <td\n          className={\n            \"table-data \" + (todo.currentState ? \"complete\" : \"in-complete\")\n          }\n        >\n          {todo.createdAt}\n        </td>\n        <td\n          className={\n            \"table-data \" + (todo.currentState ? \"complete\" : \"in-complete\")\n          }\n        >\n          {todo.dueDate}\n        </td>\n        <td\n          className={\n            \"table-data \" + (todo.currentState ? \"complete\" : \"in-complete\")\n          }\n        >\n          {actions(todo.currentState)}\n        </td>\n      </tr>\n    ));\n  };\n\n  const actions = currentState => {\n    if (currentState)\n      return (\n        <div className=\"todo-item action\">\n          <Button name={\"Re-Open\"} class_=\"re-open\" />\n        </div>\n      );\n    return (\n      <div className=\"todo-item action\">\n        <Button name=\"Edit\" class_=\"edit\" />\n        <Button name=\"Delete\" class_=\"delete\" />\n        <Button name=\"Done\" class_=\"done\" />\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <tbody>{renderTableRow(todos)}</tbody>\n      <Modal\n        show={editModalIsOpen}\n        onDismiss={onEditDismiss}\n        title=\"Edit\"\n        content={<EditForm />}\n        actions={<Button name=\"Save\" />}\n      />\n      <Modal\n        show={deleteModalIsOpen}\n        onDismiss={() => setDeleteModalIsOpen(false)}\n        title=\"Delete\"\n        content={<p>Are you sure you want to Delete</p>}\n        actions={\n          <>\n            <Button\n              name=\"Yes! I'm sure\"\n              onClick={onDeleteConfirmation}\n              class_=\"delete\"\n            />\n            <Button\n              name=\"No! Keep it\"\n              onClick={() => setDeleteModalIsOpen(false)}\n              class_=\"warning\"\n            />\n          </>\n        }\n      />\n      <Modal\n        show={isOpenDescriptionModal}\n        onDismiss={() => setIsOpenDescriptionModal(false)}\n        title=\"View Item\"\n        content={modalContent}\n        actions={\n          <Button\n            name=\"Okay!\"\n            onClick={() => setIsOpenDescriptionModal(false)}\n          />\n        }\n      />\n    </>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    todos: state.todos\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    deleteTodo: postId => dispatch(deleteTodo(postId)),\n    reOpenTodo: postId => dispatch(reOpenTodo(postId)),\n    markDone: postId => dispatch(markDone(postId))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TableList);\n"]},"metadata":{},"sourceType":"module"}