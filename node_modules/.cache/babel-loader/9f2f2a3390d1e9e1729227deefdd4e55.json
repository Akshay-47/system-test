{"ast":null,"code":"var _jsxFileName = \"/Users/akshay_lr/React-Projects/todo-application/src/components/TableRow.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport Button from \"./Button\";\nimport { compareValues, getFilteredList } from \"../utils\";\n\nconst TableRow = ({\n  todos,\n  filterBy,\n  handleTableRowClick,\n  sort\n}) => {\n  let filteredTodos = getFilteredList(todos, filterBy);\n\n  if (sort.sortBy === \"title\") {\n    console.log(sort);\n    let type = \"\";\n    if (sort.type = true) type = \"asc\";else type = \"desc\";\n    console.log(\"Sort type\", sort.type); // const newTodos = todos.sort(compareValues(\"title\", type));\n    // filteredTodos = newTodos;\n  }\n\n  return filteredTodos.map((todo, index) => React.createElement(\"tr\", {\n    key: index,\n    onClick: e => handleTableRowClick(e, todo.id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    className: \"table-data \" + (todo.currentState ? \"complete\" : \"in-complete\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, todo.title), React.createElement(\"td\", {\n    className: \"table-data \" + (todo.currentState ? \"complete\" : \"in-complete\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, todo.priority), React.createElement(\"td\", {\n    className: \"table-data \" + (todo.currentState ? \"complete\" : \"in-complete\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, todo.createdAt), React.createElement(\"td\", {\n    className: \"table-data \" + (todo.currentState ? \"complete\" : \"in-complete\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, todo.dueDate), React.createElement(\"td\", {\n    className: \"table-data \" + (todo.currentState ? \"complete\" : \"in-complete\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, actions(todo.currentState))));\n};\n\nconst actions = currentState => {\n  if (currentState) return React.createElement(\"div\", {\n    className: \"todo-item action\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(Button, {\n    name: \"Re-Open\",\n    class_: \"re-open\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }));\n  return React.createElement(\"div\", {\n    className: \"todo-item action\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(Button, {\n    name: \"Edit\",\n    class_: \"edit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), React.createElement(Button, {\n    name: \"Delete\",\n    class_: \"delete\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), React.createElement(Button, {\n    name: \"Done\",\n    class_: \"done\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }));\n};\n\nfunction hasNull(target) {\n  for (let member in target) {\n    if (target[member] !== null) return member;\n  }\n\n  return;\n}\n\nconst mapStateToProps = state => {\n  return {\n    todos: state.todos,\n    filterBy: state.filter,\n    sort: state.sort\n  };\n};\n\nexport default connect(mapStateToProps)(TableRow);","map":{"version":3,"sources":["/Users/akshay_lr/React-Projects/todo-application/src/components/TableRow.js"],"names":["React","connect","Button","compareValues","getFilteredList","TableRow","todos","filterBy","handleTableRowClick","sort","filteredTodos","sortBy","console","log","type","map","todo","index","e","id","currentState","title","priority","createdAt","dueDate","actions","hasNull","target","member","mapStateToProps","state","filter"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Button from \"./Button\";\nimport { compareValues, getFilteredList } from \"../utils\";\n\nconst TableRow = ({ todos, filterBy, handleTableRowClick, sort }) => {\n  let filteredTodos = getFilteredList(todos, filterBy);\n\n  if (sort.sortBy === \"title\") {\n    console.log(sort);\n    let type = \"\";\n    if ((sort.type = true)) type = \"asc\";\n    else type = \"desc\";\n    console.log(\"Sort type\", sort.type);\n    // const newTodos = todos.sort(compareValues(\"title\", type));\n    // filteredTodos = newTodos;\n  }\n\n  return filteredTodos.map((todo, index) => (\n    <tr key={index} onClick={e => handleTableRowClick(e, todo.id)}>\n      <td\n        className={\n          \"table-data \" + (todo.currentState ? \"complete\" : \"in-complete\")\n        }\n      >\n        {todo.title}\n      </td>\n      <td\n        className={\n          \"table-data \" + (todo.currentState ? \"complete\" : \"in-complete\")\n        }\n      >\n        {todo.priority}\n      </td>\n      <td\n        className={\n          \"table-data \" + (todo.currentState ? \"complete\" : \"in-complete\")\n        }\n      >\n        {todo.createdAt}\n      </td>\n      <td\n        className={\n          \"table-data \" + (todo.currentState ? \"complete\" : \"in-complete\")\n        }\n      >\n        {todo.dueDate}\n      </td>\n      <td\n        className={\n          \"table-data \" + (todo.currentState ? \"complete\" : \"in-complete\")\n        }\n      >\n        {actions(todo.currentState)}\n      </td>\n    </tr>\n  ));\n};\n\nconst actions = currentState => {\n  if (currentState)\n    return (\n      <div className=\"todo-item action\">\n        <Button name={\"Re-Open\"} class_=\"re-open\" />\n      </div>\n    );\n  return (\n    <div className=\"todo-item action\">\n      <Button name=\"Edit\" class_=\"edit\" />\n      <Button name=\"Delete\" class_=\"delete\" />\n      <Button name=\"Done\" class_=\"done\" />\n    </div>\n  );\n};\n\nfunction hasNull(target) {\n  for (let member in target) {\n    if (target[member] !== null) return member;\n  }\n  return;\n}\n\nconst mapStateToProps = state => {\n  return {\n    todos: state.todos,\n    filterBy: state.filter,\n    sort: state.sort\n  };\n};\n\nexport default connect(mapStateToProps)(TableRow);\n"]},"metadata":{},"sourceType":"module"}